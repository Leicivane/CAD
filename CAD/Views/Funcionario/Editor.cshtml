@using CAD.Infraestrutura.MVC
@using CAD.Infraestrutura.MVC.Helpers
@model NovoFuncionarioVM
@{
    ViewBag.Title = "Novo Funcionário";
}
<div class="row">
    <div class="col-md-12">
        <div class="page-header">
            <h2>
                Novo Funcionário
            </h2>
        </div>
    </div>
    <div class="col-md-12">
        @using (Html.BeginForm("Novo", "Funcionario", FormMethod.Post))
        {
            @Html.HiddenFor(s => s.FuncionarioId)
            <div class="row">
                <div class="col-md-3">
                    <div class="form-group">
                        @Html.LabelFor(s => s.Nome, new { @class = "control-label" })
                        @Html.TextBoxFor(s => s.Nome, new { @class = "form-control", placeholder = "Nome" })
                        @Html.ValidationMessageFor(s => s.Nome)
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        @Html.LabelFor(s => s.Sobrenome, new { @class = "control-label" })
                        @Html.TextBoxFor(s => s.Sobrenome, new { @class = "form-control", placeholder = "Sobrenome" })
                        @Html.ValidationMessageFor(s => s.Sobrenome)
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        @Html.LabelFor(s => s.CPF, new { @class = "control-label" })
                        @Html.TextBoxFor(s => s.CPF, new { @class = "form-control", placeholder = "CPF", data_mask = "000.000.000-00" })
                    </div>
                    @Html.ValidationMessageFor(s => s.CPF)
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        @Html.LabelFor(s => s.RG, new { @class = "control-label" })
                        @Html.TextBoxFor(s => s.RG, new { @class = "form-control", placeholder = "CPF", data_mask = "0.000.000" })
                    </div>
                    @Html.ValidationMessageFor(s => s.RG)
                </div>
            </div>
            <br />
            <div class="row">
                <div class='col-md-2'>
                    <div class="form-group">
                        @Html.LabelFor(s => s.DataNascimento, new { @class = "control-label" })
                        <div class='input-group date'>
                            @Html.TextBoxFor(s => s.DataNascimento, new { @class = "form-control" })
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                        @Html.ValidationMessageFor(s => s.DataNascimento)
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        @Html.LabelFor(m => m.Sexo, new { @class = "control-label" })
                        @Html.EnumDropDownListFor(s => s.Sexo, "Selecione", new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(s => s.Sexo)
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.Email, new { @class = "control-label" })
                        @Html.TextBoxFor(s => s.Email, new { @class = "form-control", placeholder = "Emai" })
                        @Html.ValidationMessageFor(s => s.Email)
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        @Html.LabelFor(m => m.Logradouro, new { @class = "control-label" })
                        @Html.TextBoxFor(s => s.Logradouro, new { @class = "form-control", placeholder = "Logradouro" })
                    </div>
                    @Html.ValidationMessageFor(s => s.Logradouro)
                </div>
            </div>
            <br />
            <div class="row">
                <div class='col-md-2'>
                    <div class="form-group">
                        @Html.LabelFor(m => m.CEP, new { @class = "control-label" })
                        @Html.TextBoxFor(s => s.CEP, new { @class = "form-control", data_mask = "00000-000" })
                        @Html.ValidationMessageFor(s => s.CEP)

                    </div>
                </div>
                <div class='col-md-4'>
                    <div class="form-group">
                        @Html.LabelFor(m => m.UFId, new { @class = "control-label" })
                        @Html.DropdownUfFor(s => s.UFId, new { @class = "form-control" })
                        @Html.ValidationMessageFor(s => s.UFId)
                    </div>
                </div>
                <div class='col-md-3'>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Cidade, new { @class = "control-label" })
                        @Html.HiddenFor(s => s.NomeMunicipio)
                        <select class="form-control" name="Cidade" id="Cidade">
                            <option>Selecione</option>
                        </select>
                        @Html.ValidationMessageFor(s => s.Cidade)

                    </div>
                </div>
                <div class='col-md-3'>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Bairro, new { @class = "control-label" })
                        @Html.TextBoxFor(s => s.Bairro, new { @class = "form-control", placeholder = "Bairro" })
                        @Html.ValidationMessageFor(s => s.Bairro)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class='col-md-3'>
                    <div class="form-group">
                        @Html.LabelFor(m => m.PontoReferencia, new { @class = "control-label" })
                        @Html.TextBoxFor(s => s.PontoReferencia, new { @class = "form-control", placeholder = "Ponto de Referência" })
                        @Html.ValidationMessageFor(s => s.PontoReferencia)
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        @Html.LabelFor(s => s.Setor, new { @class = "control-label" })
                        @Html.EnumDropDownListFor(s => s.Setor, "Selecione", new { @class = "form-control" })
                        @Html.ValidationMessageFor(s => s.Setor)
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        @Html.LabelFor(s => s.Funcao, new { @class = "control-label" })
                        @Html.EnumDropDownListFor(s => s.Funcao, "Selecione", new { @class = "form-control" })
                        @Html.ValidationMessageFor(s => s.Funcao)
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(s => s.IsInativo, new { @class = "control-label" })
                            <br />
                            @Html.CheckBoxFor(s => s.IsInativo)
                            @Html.ValidationMessageFor(s => s.IsInativo)
                        </div>
                    </div>
                </div>
            </div>
            <div class="row" style="margin-bottom: 1em;">

            </div>

            <div class="telefones">
                @{ Html.RenderPartial("_Telefones", Model?.Telefones); }
            </div>

            <div class="row">
                <div class="col-md-offset-5 col-md-2">
                    <div class="text-center">
                        <div class="telefone-indicator" title="Adicionar telefone">
                            <div class="telefone-icon">
                                <span class="fa-stack fa-3x telefone-clicavel telefone-add">
                                    <i class="fa fa-circle fa-stack-2x text-primary"></i>
                                    <i class="fa fa-phone fa-stack-1x fa-inverse"></i>
                                </span>
                            </div>
                            <div class="telefone-text">
                                <i>Novo telefone</i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-offset-3 col-md-2">
                    @Html.ActionLink("Cancelar", "Index", "Funcionario", null, new { @class = "btn btn-warning btn-block" })
                </div>
                <div class="col-md-2">
                    <input type="reset" name="btLimpar" id="txLimpar"
                           class="btn btn-info btn-block" value="Limpar" />
                </div>
                <div class="col-md-2">
                    <input type="submit" name="btSalvar" id="txGravar"
                           class="btn btn-success btn-block" value="Salvar" />
                </div>
            </div>
                    }
    </div>
</div>

@section scripts {
    <script>


        $(function () {
            var podeEditar = "@ViewBag.PodeEditar" == "True";

            if (!podeEditar) {
                $("input, select").attr("disabled", true);
                $("#Cidade option").remove();
                $("#Cidade").append("<option>" + $("#NomeMunicipio").val() + "</option>");
            }

            atualizarTelefone();
            $(".telefone-add").click(function (evt) {
                var linhaTelefone = $(".rowtelefone");

                var vazio = linhaTelefone.find("input").get().some(function (input) {
                    return $(input).val() == "";
                });


                if (vazio) {
                    Eventos.LimparValidacao();
                    Eventos.MostrarErroModelState("Não é possível adicionar um telefone sem antes preencher todos os campos");
                    return false;
                }


                AjaxCAD.Post({
                    url: CADUrl.funcionario.telefonejson,
                    success: function (retorno) {
                        if (retorno.HasErro) {
                            Eventos.MostrarErroModelState(retorno);
                            return;
                        }

                        $(".telefones").append(retorno.Model);
                        atualizarTelefone();
                    }
                });
            });

            if (podeEditar) {
                $(document).on("click", ".telefone-excluir", function (evt) {
                    Eventos.LimparValidacao();
                    var el = $(evt.currentTarget);
                    el.closest(".rowtelefone").empty();
                });
            }
        });


        var atualizarTelefone = function () {
            $("[name='telefone.TipoTelefone']").attr("name", "tipoTelefone");
        }


        $("#UFId").change(function (evt) {
            var el = $(evt.currentTarget);
            AjaxCAD.Post({
                data: { ufId: el.val() },
                url: CADUrl.funcionario.listarcidades,
                success: function (retorno) {
                    Eventos.LimparValidacao();
                    if (retorno.HasErro) {
                        Eventos.MostrarErroModelState(retorno);
                        return;
                    }


                    Eventos.CriarDropDown("#Cidade", retorno.Model, "Id", "Nome", false);
                }
            });
        });
    </script>
}